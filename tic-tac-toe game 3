using System;

class TicTacToe
{
    static void Main()
    {
        Game game = new Game();
        game.Run();
    }
}

class Game
{
    private Board board;
    private char currentPlayer;
    private int playerXScore, playerOScore;

    public Game()
    {
        board = new Board();
        currentPlayer = 'X';
    }

    public void Run()
    {
        while (true)
        {
            DisplayMenu();
            char choice = char.ToLower(Console.ReadKey().KeyChar);
            Console.WriteLine();

            switch (choice)
            {
                case 'a':
                    PlayGame();
                    break;
                case 'b':
                    DisplayAboutTheAuthor();
                    break;
                case 'c':
                    Environment.Exit(0);
                    break;
                default:
                    Console.WriteLine("Invalid choice. Please try again.");
                    break;
            }
        }
    }

    private void PlayGame()
    {
        board.Reset();
        currentPlayer = 'X';

        while (true)
        {
            board.Draw();
            if (TakeTurn() && CheckForWin())
            {
                board.Draw();
                Console.WriteLine($"Player {currentPlayer} wins!");
                UpdateScore();
                break;
            }
            if (CheckForDraw())
            {
                Console.WriteLine("It's a draw!");
                break;
            }
            SwitchPlayer();
        }

        Console.WriteLine("Game over!");
        Console.ReadLine();
    }

    private bool TakeTurn()
    {
        Console.Write($"Player {currentPlayer}, enter a number (1-9): ");
        int choice;
        if (int.TryParse(Console.ReadLine(), out choice) && choice >= 1 && choice <= 9)
        {
            int row = (choice - 1) / 3;
            int col = (choice - 1) % 3;

            if (board.IsCellEmpty(row, col))
            {
                board.UpdateCell(row, col, currentPlayer);
                return true;
            }
        }

        Console.WriteLine("Invalid move. Try again.");
        return false;
    }

    private void SwitchPlayer() => currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';

    private bool CheckForWin() => board.CheckForWin(currentPlayer);

    private void UpdateScore() => (currentPlayer == 'X') ? playerXScore++ : playerOScore++;

    private bool CheckForDraw() => board.CheckForDraw();

    private void DisplayMenu()
    {
        Console.Clear();
        Console.WriteLine("Tic Tac Toe Menu");
        Console.WriteLine("a) New Game");
        Console.WriteLine("b) About the Author");
        Console.WriteLine("c) Exit");
    }

    private void DisplayAboutTheAuthor()
    {
        Console.WriteLine("About the Author:\nYour author information goes here.\n");
    }
}

class Board
{
    private char[,] board;

    public Board()
    {
        board = new char[,]
        {
            {'1', '2', '3'},
            {'4', '5', '6'},
            {'7', '8', '9'}
        };
    }

    public void Reset()
    {
        board = new char[,]
        {
            {'1', '2', '3'},
            {'4', '5', '6'},
            {'7', '8', '9'}
        };
    }

    public void Draw()
    {
        Console.Clear();
        Console.WriteLine("Tic Tac Toe\n");

        for (int row = 0; row < 3; row++)
        {
            for (int col = 0; col < 3; col++)
            {
                Console.Write(board[row, col]);
                Console.Write(col < 2 ? " | " : "\n");
            }

            if (row < 2) Console.WriteLine("---------");
        }

        Console.WriteLine($"\nPlayer X Score: {playerXScore} | Player O Score: {playerOScore}\n");
    }

    public bool IsCellEmpty(int row, int col) => board[row, col] != 'X' && board[row, col] != 'O';

    public void UpdateCell(int row, int col, char player) => board[row, col] = player;

    public bool CheckForWin(char currentPlayer)
    {
        for (int i = 0; i < 3; i++)
        {
            if ((board[i, 0] == currentPlayer && board[i, 1] == currentPlayer && board[i, 2] == currentPlayer) ||
                (board[0, i] == currentPlayer && board[1, i] == currentPlayer && board[2, i] == currentPlayer) ||
                (board[0, 0] == currentPlayer && board[1, 1] == currentPlayer && board[2, 2] == currentPlayer) ||
                (board[0, 2] == currentPlayer && board[1, 1] == currentPlayer && board[2, 0] == currentPlayer))
            {
                return true;
            }
        }

        return false;
    }

    public bool CheckForDraw()
    {
        foreach (char cell in board)
        {
            if (cell != 'X' && cell != 'O')
                return false;
        }

        return true;
    }
}
